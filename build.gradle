import com.manning.gia.*

apply plugin: 'war'
apply plugin: 'jetty'

version = 0.1
sourceCompatibility = 1.6

jar {
    manifest {
        attributes 'Main-Class': 'com.manning.gia.todo.ToDoApp'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

jettyRun {
    httpPort = 9090
    contextPath = 'todo'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task printVersion(group: 'versioning', description: 'Prints project version.') << {
    logger.quiet "Version: $version"
}

task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') << {
    version.release = true
    ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project...'
}

// task incrementMajorVersion(group: 'versioning', description: 'Increments project major version.') << {
    // String currentVersion = version.toString()
    // ++version.major
    // String newVersion = version.toString()
    // logger.info "Incrementing major project version: $currentVersion -> $newVersion"
    // ant.propertyfile(file: versionFile) {
        // entry(key: 'major', type: 'int', operation: '+', value: 1)
    // }
// }

tasks.addRule("Pattern: increment<Classifier>Version â€“ Increments the project version classifier.") { String taskName ->
    if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) << {
            String classifier = (taskName - 'increment' - 'Version').toLowerCase()


            String currentVersion = version.toString()
            switch(classifier) {
                case 'major': ++version.major
                break
                case 'minor': ++version.minor
                break
                default: throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor']")
            }
            String newVersion = version.toString()
            println "Incrementing $classifier project version: $currentVersion -> $newVersion"
            ant.propertyfile(file: versionFile) {
                entry(key: classifier, type: 'int', operation: '+', value: 1)
            }
        }
    }
}